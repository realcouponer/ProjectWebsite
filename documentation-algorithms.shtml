<!--#include file="includes/doctype.shtml" -->

<head>
    <title>Algobots Explained</title>
    <meta name="description" content="Documentation: An introduction to algorithms, the autonomous agents living at the Algobots Competition Platform by Superalgos">
    <meta charset="utf-8">

    <!--#include file="includes/headlinks.shtml" -->

</head>
<body>

    <!--[if lt IE 7]>
        <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
    <![endif]-->

    <div id="box_wrapper" class="side_menu_page landing_page header_style_1 header_wrapper_height_auto slider_style_1" style="background-color: #FFF;">

        <!--#include file="includes/header-black-bg.shtml" -->
        <!--#include file="includes/header-logo-dark-bg.shtml" -->
        <!--#include file="includes/header2.shtml" -->
        <!--#include file="includes/side-menu.shtml" -->

        <section id="about_section" class="light_section">
            <div class="container">

                <div class="col-sm-12">
                    <h1 id="aboutbots">About Algorithms</h1>

                    <p>Algorithms or simply <em>bots</em> are open source software programmed in JavaScript and running as autonomous agents. AA Cloud calls algorithms and puts them to run in specific time intervals. They consume services from the platform and data from other bots, especially from indicators, and at the same time, produce an output that is stored in the cloud (to be consumed by other bots).</p>

                    <h3 id="typesofalgorithms">Types of Algorithms</h3>

                    <p>The AAPlatform handles three different types of bots, differentiating them by their incumbencies:</p>

                    <h4 id="sensors">Sensors</h4>

                    <p>They extract raw trades and order books data from exchanges and store it in a standardized format for other bots to consume.</p>

                    <h4 id="indicators">Indicators</h4>

                    <p>They process raw trades data and other indicators to output elaborate data structures, mainly technical indicators, for trading bots to consume.</p>

                    <p>You will most likely need to program indicators in order to perform Technical Analysis studies or functions. While it is true that you can process data and do all sorts of calculations from within your trading bot's code, this is not recommended. Superalgos encourages developers to respect incumbencies assigned to each type of bot, for several reasons:</p>

                    <ol>
                        <li><p>The AA Platform's architecture is designed so that bots can consume data from other bots, in order for the network to reuse resources. By respecting the incumbencies of each type of bot you contribute to growing the platform along with the embedded ecosystem in a sustainable manner.</p></li>

                        <li><p>The ecosystem will eventually be set up as a marketplace of sensors, indicators and trading bots. If you program and release an indicator, you will eventually be able to monetize your efforts, as bots consuming the data your indicator generates will pay you a fee (in the future).</p></li>

                        <li><p>If instead of creating an indicator, you do the technical analysis from within your trading bot, anyone can come at a later time, extract from your trading bot the code that performs the technical analysis, and create their own indicator with it. This means you may permanently lose the chance to monetize the indicator functions and effectively allow someone else to do it instead.</p></li>

                    </ol>

                    <p>Performing indicator-type calculations within your trading bot is only justified when there is a significant time constraint, such as an upcoming competition!</p>

                    <h4 id="bots">Algobots (AKA trading bots)</h4>

                    <p>They automate trading strategies and place orders through the platform, which connects to exchanges via exchanges APIs to trade cryptocurrency. Their source code becomes open source as soon as they enter their first competition.</p>

                    <h3 id="howalgorithmswork">How Algorithms Work</h3>

                    <p>Bots mission is &ndash;in essence&mdash;creating <em>products</em> that others can consume. To do this, they run <em>processes</em> which produce and store <em>datasets</em>.</p>

                    <p>Eeach bot may have several processes, and processes don't necessarily have a one-to-one relationship with products. That is, a product can be the result of the work of one or more processes.</p>

                    <p>Bot processes run when called by AA Cloud and stop when they finish the task at hand, to wake up again only when AA Cloud calls the process the next time (in configurable intervals). The datasets processes create are the actual <em>output</em> of bots which are stored in cloud storage containers. But processes also produce and store a second valuable piece of information: <em>status reports</em>.</p>

                    <p>Status reports serve as temporal annotations that bots read every time they are called by AA Cloud so as to know what was done in the previous run and what the state of affairs is at the present time. Status reports are dynamic, and they change constantly, with updates after every single run of the associated process.</p>

                    <p>We established that bots produce products for others to consume. This "others" include other alogrithms, meaning that bots usually depend on the datasets produced by other bots. We call these <em>data dependencies</em>, which are declared on each bot configuration file.</p>

                    <p>Bots consume their own status report and they might as well consume status reports from other algogorithms. We call these <em>status dependencies</em>, which are too declared in each bot configuration file.</p>

                    <p>At this point in time, there are five different types of datasets: market files, daily files, minutes files, single file and file sequence. These types of datasets define the structure of the data and how it is stored.</p>

                    <p>A <em>market file</em> contains data spanning the whole existence of the market, that is, from the day the pair (e.g. USDT-BTC) started trading up to the present time. The data is stored in one single file, which is appended every time the process runs generating new data.</p>

                    <p>A <em>daily file</em> contains data segmented by day. That is, the process generates one file per day and stores it in the deepest level of a folder tree structure of the following type:  Year > Month > Day.</p>

                    <p>A <em>minutes file</em> contains data pertaining to one single minute and is stored in the deepest level of a folder tree structure of the following type:  Year > Month > Day > Hour > Minute.</p>

                    <p>A <em>file sequence</em> consists of sequential information that is not necessarily structured on any particular timeframe. The process stores two types of files: the one ending in <em>.Sequence.json</em> contains the number of files in the sequence, and the sequence is formed by multiple files ending in a sequential number (e.g. 15.json).</p>

                    <p>A <em>single file</em> is pretty much just that: a dataset that is stored in one file only.</p>

                    <h3 id="reallifeexample">Real Life Example</h3>

                    <p>Let's put all this in perspective by analyzing the processes, products and dependencies of a few existing bots.</p>

                    <p><a href="https://github.com/AAMasters/AACharly-Extraction-Bot" rel="nofollow" target="_blank">Charly</a> is an sensor. As his <a href="https://github.com/AAMasters/AACharly-Extraction-Bot/blob/master/README.md" rel="nofollow" target="_blank">README file</a> explains, he "gets trades data for all markets &ndash;both historic and live&mdash;assuring consistency using recursive processes, and store it in a highly fragmented and usable dataset.</p>

                    <p>Also explained in Charly's README file, Charly offers one product which is defined by the dataset scope and various characteristics. Please, go on and review <a href="https://github.com/AAMasters/AACharly-Extraction-Bot/blob/master/README.md" rel="nofollow" target="_blank">Charly's README file</a>  and become familiarized with the concepts detailed in there.</p>

                    <p>Charly has three different processes: Poloniex-Live-Trades, Poloniex-Historic-Trades and Poloniex-Hole-Fixing. These three process combined generate the one single dataset that constitutes Charly's single product. The dataset is stored under the <em>minutes file</em> structure.</p>

                    <p>Now, let's see what <a href="https://github.com/AAMasters/AABruce-Indicator-Bot" rel="nofollow" target="_blank">Bruce</a>, an indicator, does with Charly's product. As you can learn from <a href="https://github.com/AAMasters/AABruce-Indicator-Bot/blob/master/README.md" rel="nofollow" target="_blank">Bruce's README file</a> he produces two datasets: candles at 1 minute resolution and volumes at 1 minute resolution. The datasets are stored under the <em>daily file</em> type of dataset.</p>

                    <p>Now scroll down the README file and see what Bruce's dependencies are. That's right. Bruce depends on Charly's product. Bruce's processes take the trades data that Charly extracted from the exchange, performs calculations to build 1 minute candles and stores his own dataset with more elaborate data. In other words, Bruce is adding value to Charly's product and offering a new value-added product of his own.</p>

                    <p>But the value-adding chain does not stop there. Let's take a look at another indicator, <a href="https://github.com/AAMasters/AAOlivia-Indicator-Bot" rel="nofollow" target="_blank">Olivia</a>. According to her <a href="https://github.com/AAMasters/AAOlivia-Indicator-Bot/blob/master/README.md" rel="nofollow" target="_blank">README file</a> Olivia offers four different products: candles at sub-hour resolutions, candles in resolutions above one hour, volumes in sub-hour resolutions and volumes in resolutions above one hour. And guess what? Indeed, Olivia uses Bruce's one minute candles and one minute volumes to produce complementary candles and volumes at different resolutions.</p>

                    <p>And so it goes. The last link in the chain usually comes in the form of algobots using data from indicators, as that is the ultimate purpose of the whole ecosystem: to provide trading bots with quality preprocessed data they can use to make the best possible trading decisions.</p>

                    <p>Let's take a look at <a href="https://github.com/AAVikings/AAArtudito-Trading-Bot" rel="nofollow" target="_blank">Artudito</a>, for instance. Artudito &ndash;an algobot&mdash;uses candles and volumes from Olivia and linear regression curves (LRC) from <a href="https://github.com/AAVikings/AAGauss-Indicator-Bot" rel="nofollow" target="_blank">Gauss</a> to make trading decisions. Of course, the main goal of an algobot like Artudito is to perform profitable trading. However, notice that trading bots too have outputs, and thus offer products that are consumable by others. Trading bots output three different products: live trading history, backtest trading history and competition trading history. Those datasets are available for others to consume. For instance, the <a href="https://develop.advancedalgos.net">development environment</a> uses those datasets to show algobots activities on a visual setting resembling typical candlestick charts so that anyone can dive in and analyze what bots are doing.</p>

                    <h2 id="aboutplotters">About Plotters</h2>

                    <p>Plotters are &ndash;too&mdash;JavaScript programs created by Teams. They serve the purpose of featuring visual representations of datasets so that people can easily interpret the data. For instance, <a href="https://github.com/AAMasters/Plotters-Candles-Volumes" rel="nofollow" target="_blank">Plotters-Candles-Volumes</a> creates the visual representation of candlesticks and volume graphs.</p>

                </div>

            </div>
        </section>

        <!--#include file="includes/footer.shtml" -->
        <!--#include file="includes/preloader.shtml" -->

</body>
</html>